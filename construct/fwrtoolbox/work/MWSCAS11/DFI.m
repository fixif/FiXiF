%Purpose:
% Fixed-point algorithm in Matlab language
% (it uses integer to simulate fixed-point)
%
%Syntax:
% y = DFI(u)
%
%Parameters:
% y: filtered output(s)
% u: intput(s)
%
% date: 26-Apr-2011 17:50:18
% Automatically generated by implementMATLAB / FWRToolbox


function y = DFI(u)

% initialize                   
u = round(2.^9.*u);y = zeros( size(u,1), 1 );xn = zeros(12,1);                
                               
for i=1:size(u,1)

    % intermediate variables    Acc00 = xn( 7) * 3869;    Acc00 = Acc00 + xn( 8) * 23214;    Acc00 = Acc00 + xn( 9) * 58034;    Acc00 = Acc00 + xn(10) * 77379;    Acc00 = Acc00 + xn(11) * 58034;    Acc00 = Acc00 + xn(12) * 23214;    Acc00 = Acc00 + u(i)   * 990450;    T00    = floor( Acc00/2^18 );    Acc01 = xn( 1) * -1774;    Acc01 = Acc01 + xn( 2) * 13334;    Acc01 = Acc01 + xn( 3) * -42169;    Acc01 = Acc01 + xn( 4) * 71918;    Acc01 = Acc01 + xn( 5) * -69870;    Acc01 = Acc01 + xn( 6) * 36738;    T01    = floor( Acc01/2^13 );    % states    Acc02 = xn( 2);    xn( 1) = Acc02;    Acc03 = xn( 3);    xn( 2) = Acc03;    Acc04 = xn( 4);    xn( 3) = Acc04;    Acc05 = xn( 5);    xn( 4) = Acc05;    Acc06 = xn( 6);    xn( 5) = Acc06;    Acc07 = T00;    Acc07 = Acc07 + (T01) * 2^10;    xn( 6) = floor( Acc07/2^10 );    Acc08 = xn( 8);    xn( 7) = Acc08;    Acc09 = xn( 9);    xn( 8) = Acc09;    Acc10 = xn(10);    xn( 9) = Acc10;    Acc11 = xn(11);    xn(10) = Acc11;    Acc12 = xn(12);    xn(11) = Acc12;    Acc13 = u(i);    xn(12) = Acc13* 2^8;    % output(s)    Acc14 = T00;    Acc14 = Acc14 + (T01) * 2^10;    y(i)   = floor( Acc14/2^18 );
    
end

y = 2.^-8.*y;