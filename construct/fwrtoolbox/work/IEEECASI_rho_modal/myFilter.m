%Purpose:
% Fixed-point algorithm in Matlab language
% (it uses integer to simulate fixed-point)
%
%Syntax:
% y = myFilter(u)
%
%Parameters:
% y: filtered output(s)
% u: intput(s)
%
% date: 03-Jul-2009 11:33:22
% Automatically generated by implementMATLAB / FWRToolbox


function y = myFilter(u)

% initialize                   
u = round(2.^11.*u);y = zeros( size(u,1), 1 );xn = zeros(4,1);                
                               
for i=1:size(u,1)

    % intermediate variables    Acc0 = (xn(1)) * 2^14;    Acc0 = Acc0 + u(i);    T0    = floor( Acc0/2^14 );    Acc1 = xn(2);    T1    = Acc1;    Acc2 = (xn(3)) * 2^1;    T2    = floor( Acc2/2^1 );    Acc3 = (xn(4)) * 2^14;    T3    = floor( Acc3/2^14 );    % states    Acc4 = T0    * 4988;    Acc4 = Acc4 + (T1) * 2^12;    Acc4 = Acc4 + xn(1) * 24576;    Acc4 = Acc4 + (u(i)) * 2^3;    xn(1) = floor( Acc4/2^15 );    Acc5 = T0    * -7362;    Acc5 = Acc5 + (T2) * 2^14;    Acc5 = Acc5 + xn(2) * 26624;    Acc5 = Acc5 + u(i)  * 177;    xn(2) = floor( Acc5/2^15 );    Acc6 = T0    * -1833;    Acc6 = Acc6 + (T3) * 2^12;    Acc6 = Acc6 + xn(3) * 28672;    Acc6 = Acc6 + u(i)  * 477;    xn(3) = floor( Acc6/2^15 );    Acc7 = T0    * -1048;    Acc7 = Acc7 + (xn(4)) * 2^14;    Acc7 = Acc7 + u(i)  * 1048;    xn(4) = floor( Acc7/2^14 );    % output(s)    Acc8 = T0;    y(i)  = Acc8;
    
end

y = 2.^-11.*y;