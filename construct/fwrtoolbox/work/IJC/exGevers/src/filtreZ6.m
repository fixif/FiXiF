%Purpose:
% Fixed-point algorithm in Matlab language
% (it uses integer to simulate fixed-point)
%
%Syntax:
% y = filtreZ6(u)
%
%Parameters:
% y: filtered output(s)
% u: intput(s)
%
% date: 14-Jan-2010 15:02:38
% Automatically generated by implementMATLAB / FWRToolbox


function y = filtreZ6(u)

% initialize                   
u = round(2.^11.*u);y = zeros( size(u,1), 1 );xn = zeros(4,1);xnp = zeros(4,1);                
                               
for i=1:size(u,1)

    % intermediate variables    Acc0 = xn(1) * 16477;    Acc0 = Acc0 + floor( (xn(2) * -25266) / 2^1 );    Acc0 = Acc0 + floor( (xn(3) * 25828) / 2^2 );    Acc0 = Acc0 + floor( (xn(4) * -28188) / 2^2 );    Acc0 = Acc0 + floor( (u(i)  * -31861) / 2^6 );    xnp(1) = floor( Acc0/2^14 );    Acc1 = floor( (xn(1) * -27952) / 2^1 );    Acc1 = Acc1 + xn(2) * 18235;    Acc1 = Acc1 + floor( (xn(3) * 20499) / 2^3 );    Acc1 = Acc1 + floor( (xn(4) * -28126) / 2^1 );    Acc1 = Acc1 + floor( (u(i)  * 23924) / 2^5 );    xnp(2) = floor( Acc1/2^14 );    Acc2 = xn(1) * -26423;    Acc2 = Acc2 + xn(2) * 22730;    Acc2 = Acc2 + floor( (xn(3) * 19009) / 2^1 );    Acc2 = Acc2 + floor( (xn(4) * -30887) / 2^1 );    Acc2 = Acc2 + floor( (u(i)  * 17930) / 2^3 );    xnp(3) = floor( Acc2/2^14 );    Acc3 = xn(1) * -21277;    Acc3 = Acc3 + xn(2) * 24592;    Acc3 = Acc3 + floor( (xn(3) * -31823) / 2^2 );    Acc3 = Acc3 + floor( (xn(4) * -25044) / 2^4 );    Acc3 = Acc3 + floor( (u(i)  * 31198) / 2^4 );    xnp(4) = floor( Acc3/2^12 );    % output(s)    Acc4 = xn(1) * 21996;    Acc4 = Acc4 + floor( (xn(2) * -16667) / 2^3 );    Acc4 = Acc4 + floor( (xn(3) * -18122) / 2^2 );    Acc4 = Acc4 + xn(4) * 22994;    y(i)   = floor( Acc4/2^15 );    %permutations    xn = xnp;
    
end

y = 2.^--6.*y;