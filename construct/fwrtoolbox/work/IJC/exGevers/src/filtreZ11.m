%Purpose:
% Fixed-point algorithm in Matlab language
% (it uses integer to simulate fixed-point)
%
%Syntax:
% y = filtreZ11(u)
%
%Parameters:
% y: filtered output(s)
% u: intput(s)
%
% date: 14-Jan-2010 15:02:38
% Automatically generated by implementMATLAB / FWRToolbox


function y = filtreZ11(u)

% initialize                   
u = round(2.^11.*u);y = zeros( size(u,1), 1 );xn = zeros(4,1);                
                               
for i=1:size(u,1)

    % intermediate variables    Acc0 = xn(1);    T0    = Acc0;    Acc1 = xn(2);    T1    = Acc1;    Acc2 = xn(3);    T2    = Acc2;    Acc3 = xn(4);    T3    = Acc3;    % states    Acc4 = T0    * -17601;    Acc4 = Acc4 + (T1) * 2^13;    Acc4 = Acc4 + floor( (xn(1) * 32684) / 2^1 );    Acc4 = Acc4 + floor( (u(i)  * 19126) / 2^2 );    xn(1) = floor( Acc4/2^14 );    Acc5 = T0    * -18065;    Acc5 = Acc5 + (T2) * 2^13;    Acc5 = Acc5 + floor( (xn(2) * 27098) / 2^2 );    Acc5 = Acc5 + floor( (u(i)  * -20652) / 2^3 );    xn(2) = floor( Acc5/2^14 );    Acc6 = T0    * -25826;    Acc6 = Acc6 + (T3) * 2^12;    Acc6 = Acc6 + floor( (xn(3) * 32324) / 2^1 );    Acc6 = Acc6 + floor( (u(i)  * 30193) / 2^5 );    xn(3) = floor( Acc6/2^14 );    Acc7 = T0    * -30395;    Acc7 = Acc7 + xn(4) * 32554;    Acc7 = Acc7 + floor( (u(i)  * 16982) / 2^4 );    xn(4) = floor( Acc7/2^15 );    % output(s)    Acc8 = T0;    y(i)  = Acc8;
    
end

y = 2.^--6.*y;