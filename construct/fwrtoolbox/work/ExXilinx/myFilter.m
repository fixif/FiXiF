% Fixed-point algorithm in Matlab language
% (it uses integer to simulate fixed-point)
%
% y = myFilter(u)
%
% y: filtered output(s)
% u: intput(s)
%
% date: 21-Dec-2007 10:19:51
% Automatically generated by implementMATLAB / FWRToolbox


function y = myFilter(u)

% initialize                   
u = round(2^31*u);y = zeros( length(u), 1 );xn = zeros(5,1);                
                               
for i=1:length(u)

    % intermediate variables    Acc00 = (xn(1)) * 2^31;    Acc00 = Acc00 + floor( (u(i)  * 1652587030) / 2^13 );    T0    = floor( Acc00/2^31 );    Acc01 = xn(2);    T1    = Acc01;    Acc02 = xn(3);    T2    = Acc02;    Acc03 = xn(4);    T3    = Acc03;    Acc04 = xn(5);    T4    = Acc04;    % states    Acc05 = floor( (T0    * -1482102632) / 2^6 );    Acc05 = Acc05 + (T1) * 2^25;    Acc05 = Acc05 + (xn(1)) * 2^31;    Acc05 = Acc05 + floor( (u(i)  * 1652811411) / 2^12 );    xn(1) = floor( Acc05/2^31 );    Acc06 = floor( (T0    * -1959974470) / 2^7 );    Acc06 = Acc06 + (T2) * 2^24;    Acc06 = Acc06 + (xn(2)) * 2^31;    Acc06 = Acc06 + floor( (u(i)  * 1378625414) / 2^17 );    xn(2) = floor( Acc06/2^31 );    Acc07 = floor( (T0    * -1418396768) / 2^7 );    Acc07 = Acc07 + (T3) * 2^24;    Acc07 = Acc07 + (xn(3)) * 2^31;    Acc07 = Acc07 + floor( (u(i)  * 1838346412) / 2^11 );    xn(3) = floor( Acc07/2^31 );    Acc08 = floor( (T0    * -1491180544) / 2^8 );    Acc08 = Acc08 + (T4) * 2^22;    Acc08 = Acc08 + (xn(4)) * 2^31;    Acc08 = Acc08 + floor( (u(i)  * 1101029376) / 2^16 );    xn(4) = floor( Acc08/2^31 );    Acc09 = floor( (T0    * -1760460800) / 2^8 );    Acc09 = Acc09 + (xn(5)) * 2^31;    Acc09 = Acc09 + floor( (u(i)  * 1761509376) / 2^9 );    xn(5) = floor( Acc09/2^31 );    % output(s)    Acc10 = T0;    y(i)  = Acc10;
    
end

y = 2^-30*y;