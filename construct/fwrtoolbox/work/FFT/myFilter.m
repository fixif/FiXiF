% Fixed-point algorithm in Matlab language
% (it uses integer to simulate fixed-point)
%
% y = myFilter(u)
%
% y: filtered output(s)
% u: intput(s)
%
% date: 06-Mar-2008 15:40:48
% Automatically generated by implementMATLAB / FWRToolbox


function y = myFilter(u)

% initialize                   
u = round(2.^[11 11 11 11 11 11 11 11].*u);y = zeros( size(u,1), 16 );xn = zeros(0,1);                
                               
for i=1:size(u,1)

    % intermediate variables    Acc0  = u(i,1);    Acc0  = Acc0  + u(i,5);    T0      = floor( Acc0 /2^1 );    Acc1  = (u(i,1)) * 2^15;    Acc1  = Acc1  + u(i,5) * -32768;    T1      = floor( Acc1 /2^16 );    Acc2  = u(i,3);    Acc2  = Acc2  + u(i,7);    T2      = floor( Acc2 /2^1 );    Acc3  = (u(i,3)) * 2^15;    Acc3  = Acc3  + u(i,7) * -32768;    T3      = floor( Acc3 /2^16 );    Acc4  = u(i,2);    Acc4  = Acc4  + u(i,6);    T4      = floor( Acc4 /2^1 );    Acc5  = (u(i,2)) * 2^15;    Acc5  = Acc5  + u(i,6) * -32768;    T5      = floor( Acc5 /2^16 );    Acc6  = u(i,4);    Acc6  = Acc6  + u(i,8);    T6      = floor( Acc6 /2^1 );    Acc7  = (u(i,4)) * 2^15;    Acc7  = Acc7  + u(i,8) * -32768;    T7      = floor( Acc7 /2^16 );    Acc8  = T0;    Acc8  = Acc8  + T2;    T8      = floor( Acc8 /2^1 );    Acc9  = (T0) * 2^15;    Acc9  = Acc9  + T2     * -32768;    T9      = floor( Acc9 /2^16 );    Acc10 = T4;    Acc10 = Acc10 + T6;    T10     = floor( Acc10/2^1 );    Acc11 = (T4) * 2^15;    Acc11 = Acc11 + T6     * -32768;    T11     = floor( Acc11/2^16 );    Acc12 = T5     * -23170;    Acc12 = Acc12 + T7     * 23170;    T12     = floor( Acc12/2^15 );    Acc13 = T5     * -23170;    Acc13 = Acc13 + T7     * -23170;    T13     = floor( Acc13/2^15 );    % states    Acc14 = T8;    Acc14 = Acc14 + T10;    y(i, 1) = floor( Acc14/2^1 );    y(i, 2) = floor( Acc15/2^NaN );    Acc16 = (T1) * 2^15;    Acc16 = Acc16 + T5     * 23170;    Acc16 = Acc16 + T7     * -23170;    y(i, 3) = floor( Acc16/2^16 );    Acc17 = T3     * -32768;    Acc17 = Acc17 + T5     * -23170;    Acc17 = Acc17 + T7     * -23170;    y(i, 4) = floor( Acc17/2^16 );    Acc18 = T9;    y(i, 5) = Acc18;    Acc19 = T11    * -32768;    y(i, 6) = floor( Acc19/2^15 );    Acc20 = T1;    Acc20 = Acc20 + T12;    y(i, 7) = floor( Acc20/2^1 );    Acc21 = T3;    Acc21 = Acc21 + T13;    y(i, 8) = floor( Acc21/2^1 );    Acc22 = (T8) * 2^15;    Acc22 = Acc22 + T10    * -32768;    y(i, 9) = floor( Acc22/2^16 );    y(i,10) = floor( Acc23/2^NaN );    Acc24 = (T1) * 2^15;    Acc24 = Acc24 + T5     * -23170;    Acc24 = Acc24 + T7     * 23170;    y(i,11) = floor( Acc24/2^16 );    Acc25 = T3     * -32768;    Acc25 = Acc25 + T5     * 23170;    Acc25 = Acc25 + T7     * 23170;    y(i,12) = floor( Acc25/2^16 );    Acc26 = T9;    y(i,13) = Acc26;    Acc27 = T11;    y(i,14) = Acc27;    Acc28 = (T1) * 2^15;    Acc28 = Acc28 + T12    * -32768;    y(i,15) = floor( Acc28/2^16 );    Acc29 = (T3) * 2^15;    Acc29 = Acc29 + T13    * -32768;    y(i,16) = floor( Acc29/2^16 );
    
end

y = 2.^-[8 Inf 9 9 9 9 9 9 8 Inf 9 9 9 9 9 9].*y;