% Fixed-point algorithm in Matlab language
% (it uses integer to simulate fixed-point)
%
% y = FDIIdelta(u)
%
% y: filtered output(s)
% u: intput(s)
%
% date: 07-Dec-2007 14:37:11
% Automatically generated by implementMATLAB / FWRToolbox


function y = FDIIdelta(u)

% initialize                   
u = round(2^11*u);y = zeros( length(u), 1 );xn = zeros(6,1);                
                               
for i=1:length(u)

    % intermediate variables    Acc 0 = xn(1) * -11383;    Acc 0 = Acc 0 + xn(2) * -31123;    Acc 0 = Acc 0 + xn(3) * -22773;    Acc 0 = Acc 0 + xn(4) * -13468;    Acc 0 = Acc 0 + xn(5) * -9425;    Acc 0 = Acc 0 + xn(6) * -1852;    Acc 0 = Acc 0 + (u(i)) * 2^8;    T0    = floor( Acc 0/2^13 );    Acc 1 = xn(1);    T1    = Acc 1;    Acc 2 = xn(2);    T2    = Acc 2;    Acc 3 = xn(3);    T3    = Acc 3;    Acc 4 = xn(4);    T4    = Acc 4;    Acc 5 = xn(5);    T5    = Acc 5;    % states    Acc 6 = T0;    Acc 6 = Acc 6 + (xn(1)) * 2^2;    xn(1) = floor( Acc 6/2^2 );    Acc 7 = T1;    Acc 7 = Acc 7 + (xn(2)) * 2^3;    xn(2) = floor( Acc 7/2^3 );    Acc 8 = T2;    Acc 8 = Acc 8 + (xn(3)) * 2^2;    xn(3) = floor( Acc 8/2^2 );    Acc 9 = T3;    Acc 9 = Acc 9 + (xn(4)) * 2^2;    xn(4) = floor( Acc 9/2^2 );    Acc10 = T4;    Acc10 = Acc10 + (xn(5)) * 2^3;    xn(5) = floor( Acc10/2^3 );    Acc11 = T5;    Acc11 = Acc11 + (xn(6)) * 2^2;    xn(6) = floor( Acc11/2^2 );    % output(s)    Acc12 = xn(1) * 792;    Acc12 = Acc12 + xn(2) * 12559;    Acc12 = Acc12 + xn(3) * 12190;    Acc12 = Acc12 + xn(4) * 29211;    Acc12 = Acc12 + xn(5) * 22483;    Acc12 = Acc12 + xn(6) * 30784;    Acc12 = Acc12 + u(i)  * 19;    y(i)  = floor( Acc12/2^13 );
    
end

y = 2^-10*y;