% Fixed-point algorithm in Matlab language
% (it uses integer to simulate fixed-point)
%
% y = filtreR1(u)
%
% y: filtered output(s)
% u: intput(s)
%
% date: 14-Feb-2008 11:30:11
% Automatically generated by implementMATLAB / FWRToolbox


function y = filtreR1(u)

% initialize                   
u = round(2^15*u);y = zeros( length(u), 1 );xn = zeros(16,1);                
                               
for i=1:length(u)

    % intermediate variables    Acc00 = xn( 1) * -718;    Acc00 = Acc00 + xn( 2) * 3491;    Acc00 = Acc00 + xn( 3) * -9268;    Acc00 = Acc00 + xn( 4) * 16018;    Acc00 = Acc00 + xn( 5) * -19749;    Acc00 = Acc00 + xn( 6) * 17492;    Acc00 = Acc00 + xn( 7) * -11063;    Acc00 = Acc00 + xn( 8) * 4562;    Acc00 = Acc00 + xn( 9) * 11;    Acc00 = Acc00 + xn(10) * -40;    Acc00 = Acc00 + xn(11) * 84;    Acc00 = Acc00 + xn(12) * -124;    Acc00 = Acc00 + xn(13) * 142;    Acc00 = Acc00 + xn(14) * -124;    Acc00 = Acc00 + xn(15) * 84;    Acc00 = Acc00 + xn(16) * -40;    Acc00 = Acc00 + u(i)   * 11;    T0     = floor( Acc00/2^10 );    % states    Acc01 = xn( 2);    xn( 1) = Acc01;    Acc02 = xn( 3);    xn( 2) = Acc02;    Acc03 = xn( 4);    xn( 3) = Acc03;    Acc04 = xn( 5);    xn( 4) = Acc04;    Acc05 = xn( 6);    xn( 5) = Acc05;    Acc06 = xn( 7);    xn( 6) = Acc06;    Acc07 = xn( 8);    xn( 7) = Acc07;    Acc08 = T0;    xn( 8) = Acc08;    Acc09 = xn(10);    xn( 9) = Acc09;    Acc10 = xn(11);    xn(10) = Acc10;    Acc11 = xn(12);    xn(11) = Acc11;    Acc12 = xn(13);    xn(12) = Acc12;    Acc13 = xn(14);    xn(13) = Acc13;    Acc14 = xn(15);    xn(14) = Acc14;    Acc15 = xn(16);    xn(15) = Acc15;    Acc16 = u(i);    xn(16) = Acc16;    % output(s)    Acc17 = T0;    y(i)   = Acc17;
    
end

y = 2^-13*y;