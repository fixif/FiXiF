%Purpose:
% Fixed-point algorithm in Matlab language
% (it uses integer to simulate fixed-point)
%
%Syntax:
% y = myFilter(u)
%
%Parameters:
% y: filtered output(s)
% u: intput(s)
%
% date: 07-Feb-2011 00:08:51
% Automatically generated by implementMATLAB / FWRToolbox


function y = myFilter(u)

% initialize                   
u = round(2.^7.*u);y = zeros( size(u,1), 1 );xn = zeros(3,1);                
                               
for i=1:size(u,1)

    % intermediate variables    Acc0 = (xn(1)) * 2^10;    Acc0 = Acc0 + floor( (u(i)  * 1411) / 2^12 );    T0    = floor( Acc0/2^10 );    Acc1 = xn(2);    T1    = Acc1;    Acc2 = xn(3);    T2    = Acc2;    % states    Acc3 = floor( (T0    * -1648) / 2^7 );    Acc3 = Acc3 + (T1) * 2^4;    Acc3 = Acc3 + (xn(1)) * 2^10;    Acc3 = Acc3 + floor( (u(i)  * 1411) / 2^11 );    xn(1) = floor( Acc3/2^10 );    Acc4 = floor( (T0    * -1861) / 2^8 );    Acc4 = Acc4 + (T2) * 2^3;    Acc4 = Acc4 + (xn(2)) * 2^10;    Acc4 = Acc4 + floor( (u(i)  * 1517) / 2^15 );    xn(2) = floor( Acc4/2^10 );    Acc5 = floor( (T0    * -2023) / 2^9 );    Acc5 = Acc5 + (xn(3)) * 2^10;    Acc5 = Acc5 + floor( (u(i)  * 2023) / 2^9 );    xn(3) = floor( Acc5/2^10 );    % output(s)    Acc6 = T0;    y(i)  = Acc6;
    
end

y = 2.^-7.*y;