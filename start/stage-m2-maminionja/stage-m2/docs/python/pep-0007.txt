<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US">
<head>
<link rel="icon" href="/peps/static/hgicon.png" type="image/png" />
<meta name="robots" content="index, nofollow" />
<link rel="stylesheet" href="/peps/static/style-paper.css" type="text/css" />
<script type="text/javascript" src="/peps/static/mercurial.js"></script>

<link rel="stylesheet" href="/peps/highlightcss" type="text/css" />
<title>peps: c6b71aac2d29 pep-0007.txt</title>
</head>
<body>

<div class="container">
<div class="menu">
<div class="logo">
<a href="https://hg.python.org">
<img src="/peps/static/hglogo.png" alt="back to hg.python.org repositories" /></a>
</div>
<ul>
<li><a href="/peps/shortlog/c6b71aac2d29">log</a></li>
<li><a href="/peps/graph/c6b71aac2d29">graph</a></li>
<li><a href="/peps/tags">tags</a></li>
<li><a href="/peps/branches">branches</a></li>
</ul>
<ul>
<li><a href="/peps/rev/c6b71aac2d29">changeset</a></li>
<li><a href="/peps/file/c6b71aac2d29/">browse</a></li>
</ul>
<ul>
<li class="active">file</li>
<li><a href="/peps/file/tip/pep-0007.txt">latest</a></li>
<li><a href="/peps/diff/c6b71aac2d29/pep-0007.txt">diff</a></li>
<li><a href="/peps/comparison/c6b71aac2d29/pep-0007.txt">comparison</a></li>
<li><a href="/peps/annotate/c6b71aac2d29/pep-0007.txt">annotate</a></li>
<li><a href="/peps/log/c6b71aac2d29/pep-0007.txt">file log</a></li>
<li><a href="/peps/raw-file/c6b71aac2d29/pep-0007.txt">raw</a></li>
</ul>
<ul>
<li><a href="/peps/help">help</a></li>
</ul>
</div>

<div class="main">
<h2 class="breadcrumb"><a href="/">Mercurial</a> &gt; <a href="/peps">peps</a> </h2>
<h3>view pep-0007.txt @ 5896:c6b71aac2d29</h3>

<form class="search" action="/peps/log">

<p><input name="rev" id="search1" type="text" size="30" /></p>
<div id="hint">Find changesets by keywords (author, files, the commit message), revision
number or hash, or <a href="/peps/help/revsets">revset expression</a>.</div>
</form>

<div class="description">Drop rejected PEP 455 from list of proposed changes</div>

<table id="changesetEntry">
<tr>
 <th class="author">author</th>
 <td class="author">&#65;&#110;&#100;&#114;&#101;&#119;&#32;&#83;&#118;&#101;&#116;&#108;&#111;&#118;&#32;&#60;&#97;&#110;&#100;&#114;&#101;&#119;&#46;&#115;&#118;&#101;&#116;&#108;&#111;&#118;&#64;&#103;&#109;&#97;&#105;&#108;&#46;&#99;&#111;&#109;&#62;</td>
</tr>
<tr>
 <th class="date">date</th>
 <td class="date age">Fri, 12 Jun 2015 17:15:26 +0300</td>
</tr>
<tr>
 <th class="author">parents</th>
 <td class="author"><a href="/peps/file/8280e184ad18/pep-0007.txt">8280e184ad18</a> </td>
</tr>
<tr>
 <th class="author">children</th>
 <td class="author"></td>
</tr>
</table>

<div class="overflow">
<div class="sourcefirst linewraptoggle">line wrap: <a class="linewraplink" href="javascript:toggleLinewrap()">on</a></div>
<div class="sourcefirst"> line source</div>
<pre class="sourcelines stripes4 wrap">
<span id="l1">PEP: 7</span><a href="#l1"></a>
<span id="l2">Title: Style Guide for C Code</span><a href="#l2"></a>
<span id="l3">Version: $Revision$</span><a href="#l3"></a>
<span id="l4">Last-Modified: $Date$</span><a href="#l4"></a>
<span id="l5">Author: Guido van Rossum &lt;guido@python.org&gt;</span><a href="#l5"></a>
<span id="l6">Status: Active</span><a href="#l6"></a>
<span id="l7">Type: Process</span><a href="#l7"></a>
<span id="l8">Content-Type: text/x-rst</span><a href="#l8"></a>
<span id="l9">Created: 05-Jul-2001</span><a href="#l9"></a>
<span id="l10">Post-History:</span><a href="#l10"></a>
<span id="l11"></span><a href="#l11"></a>
<span id="l12"></span><a href="#l12"></a>
<span id="l13">Introduction</span><a href="#l13"></a>
<span id="l14">============</span><a href="#l14"></a>
<span id="l15"></span><a href="#l15"></a>
<span id="l16">This document gives coding conventions for the C code comprising the C</span><a href="#l16"></a>
<span id="l17">implementation of Python.  Please see the companion informational PEP</span><a href="#l17"></a>
<span id="l18">describing style guidelines for Python code [1]_.</span><a href="#l18"></a>
<span id="l19"></span><a href="#l19"></a>
<span id="l20">Note, rules are there to be broken.  Two good reasons to break a</span><a href="#l20"></a>
<span id="l21">particular rule:</span><a href="#l21"></a>
<span id="l22"></span><a href="#l22"></a>
<span id="l23">1. When applying the rule would make the code less readable, even for</span><a href="#l23"></a>
<span id="l24">   someone who is used to reading code that follows the rules.</span><a href="#l24"></a>
<span id="l25"></span><a href="#l25"></a>
<span id="l26">2. To be consistent with surrounding code that also breaks it (maybe</span><a href="#l26"></a>
<span id="l27">   for historic reasons) -- although this is also an opportunity to</span><a href="#l27"></a>
<span id="l28">   clean up someone else&#39;s mess (in true XP style).</span><a href="#l28"></a>
<span id="l29"></span><a href="#l29"></a>
<span id="l30"></span><a href="#l30"></a>
<span id="l31">C dialect</span><a href="#l31"></a>
<span id="l32">=========</span><a href="#l32"></a>
<span id="l33"></span><a href="#l33"></a>
<span id="l34">* Use ANSI/ISO standard C (the 1989 version of the standard).  This</span><a href="#l34"></a>
<span id="l35">  means (amongst many other things) that all declarations must be at</span><a href="#l35"></a>
<span id="l36">  the top of a block (not necessarily at the top of function).</span><a href="#l36"></a>
<span id="l37"></span><a href="#l37"></a>
<span id="l38">* Don&#39;t use GCC extensions (e.g. don&#39;t write multi-line strings</span><a href="#l38"></a>
<span id="l39">  without trailing backslashes).</span><a href="#l39"></a>
<span id="l40"></span><a href="#l40"></a>
<span id="l41">* All function declarations and definitions must use full prototypes</span><a href="#l41"></a>
<span id="l42">  (i.e. specify the types of all arguments).</span><a href="#l42"></a>
<span id="l43"></span><a href="#l43"></a>
<span id="l44">* Never use C++ style // one-line comments.</span><a href="#l44"></a>
<span id="l45"></span><a href="#l45"></a>
<span id="l46">* No compiler warnings with major compilers (gcc, VC++, a few others).</span><a href="#l46"></a>
<span id="l47"></span><a href="#l47"></a>
<span id="l48"></span><a href="#l48"></a>
<span id="l49">Code lay-out</span><a href="#l49"></a>
<span id="l50">============</span><a href="#l50"></a>
<span id="l51"></span><a href="#l51"></a>
<span id="l52">* Use 4-space indents and no tabs at all.</span><a href="#l52"></a>
<span id="l53"></span><a href="#l53"></a>
<span id="l54">* No line should be longer than 79 characters.  If this and the</span><a href="#l54"></a>
<span id="l55">  previous rule together don&#39;t give you enough room to code, your code</span><a href="#l55"></a>
<span id="l56">  is too complicated -- consider using subroutines.</span><a href="#l56"></a>
<span id="l57"></span><a href="#l57"></a>
<span id="l58">* No line should end in whitespace.  If you think you need significant</span><a href="#l58"></a>
<span id="l59">  trailing whitespace, think again -- somebody&#39;s editor might delete</span><a href="#l59"></a>
<span id="l60">  it as a matter of routine.</span><a href="#l60"></a>
<span id="l61"></span><a href="#l61"></a>
<span id="l62">* Function definition style: function name in column 1, outermost</span><a href="#l62"></a>
<span id="l63">  curly braces in column 1, blank line after local variable</span><a href="#l63"></a>
<span id="l64">  declarations.  ::</span><a href="#l64"></a>
<span id="l65"></span><a href="#l65"></a>
<span id="l66">      static int</span><a href="#l66"></a>
<span id="l67">      extra_ivars(PyTypeObject *type, PyTypeObject *base)</span><a href="#l67"></a>
<span id="l68">      {</span><a href="#l68"></a>
<span id="l69">          int t_size = PyType_BASICSIZE(type);</span><a href="#l69"></a>
<span id="l70">          int b_size = PyType_BASICSIZE(base);</span><a href="#l70"></a>
<span id="l71"></span><a href="#l71"></a>
<span id="l72">          assert(t_size &gt;= b_size); /* type smaller than base! */</span><a href="#l72"></a>
<span id="l73">          ...</span><a href="#l73"></a>
<span id="l74">          return 1;</span><a href="#l74"></a>
<span id="l75">      }</span><a href="#l75"></a>
<span id="l76"></span><a href="#l76"></a>
<span id="l77">* Code structure: one space between keywords like ``if``, ``for`` and</span><a href="#l77"></a>
<span id="l78">  the following left paren; no spaces inside the paren; braces may be</span><a href="#l78"></a>
<span id="l79">  omitted where C permits but when present, they should be formatted</span><a href="#l79"></a>
<span id="l80">  as shown::</span><a href="#l80"></a>
<span id="l81"></span><a href="#l81"></a>
<span id="l82">      if (mro != NULL) {</span><a href="#l82"></a>
<span id="l83">          ...</span><a href="#l83"></a>
<span id="l84">      }</span><a href="#l84"></a>
<span id="l85">      else {</span><a href="#l85"></a>
<span id="l86">          ...</span><a href="#l86"></a>
<span id="l87">      }</span><a href="#l87"></a>
<span id="l88"></span><a href="#l88"></a>
<span id="l89">* The return statement should *not* get redundant parentheses::</span><a href="#l89"></a>
<span id="l90"></span><a href="#l90"></a>
<span id="l91">      return Py_None; /* correct */</span><a href="#l91"></a>
<span id="l92">      return(Py_None); /* incorrect */</span><a href="#l92"></a>
<span id="l93"></span><a href="#l93"></a>
<span id="l94">* Function and macro call style: ``foo(a, b, c)`` -- no space before</span><a href="#l94"></a>
<span id="l95">  the open paren, no spaces inside the parens, no spaces before</span><a href="#l95"></a>
<span id="l96">  commas, one space after each comma.</span><a href="#l96"></a>
<span id="l97"></span><a href="#l97"></a>
<span id="l98">* Always put spaces around assignment, Boolean and comparison</span><a href="#l98"></a>
<span id="l99">  operators.  In expressions using a lot of operators, add spaces</span><a href="#l99"></a>
<span id="l100">  around the outermost (lowest-priority) operators.</span><a href="#l100"></a>
<span id="l101"></span><a href="#l101"></a>
<span id="l102">* Breaking long lines: if you can, break after commas in the outermost</span><a href="#l102"></a>
<span id="l103">  argument list.  Always indent continuation lines appropriately,</span><a href="#l103"></a>
<span id="l104">  e.g.::</span><a href="#l104"></a>
<span id="l105"></span><a href="#l105"></a>
<span id="l106">      PyErr_Format(PyExc_TypeError,</span><a href="#l106"></a>
<span id="l107">                   &quot;cannot create &#39;%.100s&#39; instances&quot;,</span><a href="#l107"></a>
<span id="l108">                   type-&gt;tp_name);</span><a href="#l108"></a>
<span id="l109"></span><a href="#l109"></a>
<span id="l110">* When you break a long expression at a binary operator, the</span><a href="#l110"></a>
<span id="l111">  operator goes at the end of the previous line, e.g.::</span><a href="#l111"></a>
<span id="l112"></span><a href="#l112"></a>
<span id="l113">      if (type-&gt;tp_dictoffset != 0 &amp;&amp; base-&gt;tp_dictoffset == 0 &amp;&amp;</span><a href="#l113"></a>
<span id="l114">          type-&gt;tp_dictoffset == b_size &amp;&amp;</span><a href="#l114"></a>
<span id="l115">          (size_t)t_size == b_size + sizeof(PyObject *))</span><a href="#l115"></a>
<span id="l116">          return 0; /* &quot;Forgive&quot; adding a __dict__ only */</span><a href="#l116"></a>
<span id="l117"></span><a href="#l117"></a>
<span id="l118">* Put blank lines around functions, structure definitions, and major</span><a href="#l118"></a>
<span id="l119">  sections inside functions.</span><a href="#l119"></a>
<span id="l120"></span><a href="#l120"></a>
<span id="l121">* Comments go before the code they describe.</span><a href="#l121"></a>
<span id="l122"></span><a href="#l122"></a>
<span id="l123">* All functions and global variables should be declared static unless</span><a href="#l123"></a>
<span id="l124">  they are to be part of a published interface</span><a href="#l124"></a>
<span id="l125"></span><a href="#l125"></a>
<span id="l126">* For external functions and variables, we always have a declaration</span><a href="#l126"></a>
<span id="l127">  in an appropriate header file in the &quot;Include&quot; directory, which uses</span><a href="#l127"></a>
<span id="l128">  the ``PyAPI_FUNC()`` macro, like this::</span><a href="#l128"></a>
<span id="l129"></span><a href="#l129"></a>
<span id="l130">      PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);</span><a href="#l130"></a>
<span id="l131"></span><a href="#l131"></a>
<span id="l132"></span><a href="#l132"></a>
<span id="l133">Naming conventions</span><a href="#l133"></a>
<span id="l134">==================</span><a href="#l134"></a>
<span id="l135"></span><a href="#l135"></a>
<span id="l136">* Use a ``Py`` prefix for public functions; never for static</span><a href="#l136"></a>
<span id="l137">  functions.  The ``Py_`` prefix is reserved for global service</span><a href="#l137"></a>
<span id="l138">  routines like ``Py_FatalError``; specific groups of routines</span><a href="#l138"></a>
<span id="l139">  (e.g. specific object type APIs) use a longer prefix,</span><a href="#l139"></a>
<span id="l140">  e.g. ``PyString_`` for string functions.</span><a href="#l140"></a>
<span id="l141"></span><a href="#l141"></a>
<span id="l142">* Public functions and variables use MixedCase with underscores, like</span><a href="#l142"></a>
<span id="l143">  this: ``PyObject_GetAttr``, ``Py_BuildValue``, ``PyExc_TypeError``.</span><a href="#l143"></a>
<span id="l144"></span><a href="#l144"></a>
<span id="l145">* Occasionally an &quot;internal&quot; function has to be visible to the loader;</span><a href="#l145"></a>
<span id="l146">  we use the ``_Py`` prefix for this, e.g.: ``_PyObject_Dump``.</span><a href="#l146"></a>
<span id="l147"></span><a href="#l147"></a>
<span id="l148">* Macros should have a MixedCase prefix and then use upper case, for</span><a href="#l148"></a>
<span id="l149">  example: ``PyString_AS_STRING``, ``Py_PRINT_RAW``.</span><a href="#l149"></a>
<span id="l150"></span><a href="#l150"></a>
<span id="l151"></span><a href="#l151"></a>
<span id="l152">Documentation Strings</span><a href="#l152"></a>
<span id="l153">=====================</span><a href="#l153"></a>
<span id="l154"></span><a href="#l154"></a>
<span id="l155">* Use the ``PyDoc_STR()`` or ``PyDoc_STRVAR()`` macro for docstrings</span><a href="#l155"></a>
<span id="l156">  to support building Python without docstrings (``./configure</span><a href="#l156"></a>
<span id="l157">  --without-doc-strings``).</span><a href="#l157"></a>
<span id="l158"></span><a href="#l158"></a>
<span id="l159">  For C code that needs to support versions of Python older than 2.3,</span><a href="#l159"></a>
<span id="l160">  you can include this after including ``Python.h``::</span><a href="#l160"></a>
<span id="l161"></span><a href="#l161"></a>
<span id="l162">      #ifndef PyDoc_STR</span><a href="#l162"></a>
<span id="l163">      #define PyDoc_VAR(name)         static char name[]</span><a href="#l163"></a>
<span id="l164">      #define PyDoc_STR(str)          (str)</span><a href="#l164"></a>
<span id="l165">      #define PyDoc_STRVAR(name, str) PyDoc_VAR(name) = PyDoc_STR(str)</span><a href="#l165"></a>
<span id="l166">      #endif</span><a href="#l166"></a>
<span id="l167"></span><a href="#l167"></a>
<span id="l168">* The first line of each fuction docstring should be a &quot;signature</span><a href="#l168"></a>
<span id="l169">  line&quot; that gives a brief synopsis of the arguments and return value.</span><a href="#l169"></a>
<span id="l170">  For example::</span><a href="#l170"></a>
<span id="l171"></span><a href="#l171"></a>
<span id="l172">      PyDoc_STRVAR(myfunction__doc__,</span><a href="#l172"></a>
<span id="l173">      &quot;myfunction(name, value) -&gt; bool\n\n\</span><a href="#l173"></a>
<span id="l174">      Determine whether name and value make a valid pair.&quot;);</span><a href="#l174"></a>
<span id="l175"></span><a href="#l175"></a>
<span id="l176">  Always include a blank line between the signature line and the text</span><a href="#l176"></a>
<span id="l177">  of the description.</span><a href="#l177"></a>
<span id="l178"></span><a href="#l178"></a>
<span id="l179">  If the return value for the function is always None (because there</span><a href="#l179"></a>
<span id="l180">  is no meaningful return value), do not include the indication of the</span><a href="#l180"></a>
<span id="l181">  return type.</span><a href="#l181"></a>
<span id="l182"></span><a href="#l182"></a>
<span id="l183">* When writing multi-line docstrings, be sure to always use backslash</span><a href="#l183"></a>
<span id="l184">  continuations, as in the example above, or string literal</span><a href="#l184"></a>
<span id="l185">  concatenation::</span><a href="#l185"></a>
<span id="l186"></span><a href="#l186"></a>
<span id="l187">      PyDoc_STRVAR(myfunction__doc__,</span><a href="#l187"></a>
<span id="l188">      &quot;myfunction(name, value) -&gt; bool\n\n&quot;</span><a href="#l188"></a>
<span id="l189">      &quot;Determine whether name and value make a valid pair.&quot;);</span><a href="#l189"></a>
<span id="l190"></span><a href="#l190"></a>
<span id="l191">  Though some C compilers accept string literals without either::</span><a href="#l191"></a>
<span id="l192"></span><a href="#l192"></a>
<span id="l193">      /* BAD -- don&#39;t do this! */</span><a href="#l193"></a>
<span id="l194">      PyDoc_STRVAR(myfunction__doc__,</span><a href="#l194"></a>
<span id="l195">      &quot;myfunction(name, value) -&gt; bool\n\n</span><a href="#l195"></a>
<span id="l196">      Determine whether name and value make a valid pair.&quot;);</span><a href="#l196"></a>
<span id="l197"></span><a href="#l197"></a>
<span id="l198">  not all do; the MSVC compiler is known to complain about this.</span><a href="#l198"></a>
<span id="l199"></span><a href="#l199"></a>
<span id="l200"></span><a href="#l200"></a>
<span id="l201">References</span><a href="#l201"></a>
<span id="l202">==========</span><a href="#l202"></a>
<span id="l203"></span><a href="#l203"></a>
<span id="l204">.. [1] PEP 8, &quot;Style Guide for Python Code&quot;, van Rossum, Warsaw</span><a href="#l204"></a>
<span id="l205">       (http://www.python.org/dev/peps/pep-0008)</span><a href="#l205"></a>
<span id="l206"></span><a href="#l206"></a>
<span id="l207"></span><a href="#l207"></a>
<span id="l208">Copyright</span><a href="#l208"></a>
<span id="l209">=========</span><a href="#l209"></a>
<span id="l210"></span><a href="#l210"></a>
<span id="l211">This document has been placed in the public domain.</span><a href="#l211"></a>
<span id="l212"></span><a href="#l212"></a>
<span id="l213"></span><a href="#l213"></a>
<span id="l214"></span><a href="#l214"></a>
<span id="l215"></span><a href="#l215"></a>
<span id="l216">..</span><a href="#l216"></a>
<span id="l217">   Local Variables:</span><a href="#l217"></a>
<span id="l218">   mode: indented-text</span><a href="#l218"></a>
<span id="l219">   indent-tabs-mode: nil</span><a href="#l219"></a>
<span id="l220">   sentence-end-double-space: t</span><a href="#l220"></a>
<span id="l221">   fill-column: 70</span><a href="#l221"></a>
<span id="l222">   coding: utf-8</span><a href="#l222"></a></pre>
<div class="sourcelast"></div>
</div>
</div>
</div>

<script type="text/javascript">process_dates()</script>


</body>
</html>

