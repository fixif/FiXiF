%==============================================================================
\section{Le problème à résoudre}
%==============================================================================

%_______________________________________________________________________________________
\begin{frame} \FT{Définition et analyse du problème}
	Le module d'entrée pour FiPoGen (SLX2SIF):
	\begin{center}
	\FIGW{0.7}{slx2sif}
	\end{center}
    \BI
	\o Les fichiers de diagramme simulink ne sont pas bien documentés, donc il faut faire un peu de \textbf{reverse-engineering}
		%(ça prend beaucoup de temps!)
    \o Un minimum de compréhension sur \textbf{l'algèbre linéaire, la théorie des graphes et les filtres numériques}
	\o Comprendre la représentation en \textbf{S.I.F} des systèmes linéaires
	\o Trouver l'\textbf{algorithme} pour la transformation
    \EI
		%[ ici, figure à quoi ressemble un  diag et un sif ]
	\note{
	SIF : Specialized Implicite Form : un forme spécifique plus complet de la représentation d'état des systèmes linéaires
	SLX2SIF : permettra d'interpréter un diagramme de blocs Simulink et de générer le S.I.F.(Specialized Implicite Form) correspondant, une sorte de représentation en espace d'état demandé à l'entrée par FiPoGen.
	}
\end{frame} 
%
%________________________________________________________________________________________
\begin{frame} \FT{Définition et analyse du problème}
	Le module de sortie avec Stratus (oSoP2VHDL):
	\begin{center}
	\FIGW{0.7}{osop2vhdl}
	\end{center}
    \BI
    \o Avoir une notion sur l'\textbf{arithmétique virgule fixe} 
	\o Comprendre un peu l'outil \textbf{FiPoGen}, en particulier la \textbf{classe oSoP} 
	\o Savoir utiliser efficacement les \textbf{Générateurs de Stratus}
	\o Un mécanisme pour \textbf{valider} que le code vhdl généré correspond bien à l'oSoP 
    \EI
		%[ici, figure à quoi ressemble un oSoP + netlist vhdl ]
	\note{
	oSoP : ordered Sum of Product : une somme de produit ordonné, à la sortie de FiPoGen
	oSoP2VHDL: permettra de générer un circuit (VHDL) correspondant au graphe de calcul (SoP : Sum of Product) obtenu par FipoGen
	}
\end{frame}
%
%___________________________________________________________________________________________
\begin{frame} \FT{Définition et analyse du problème}
	L' \textbf{intégration} des modules developpés:\\
	On veut avoir un flot de conception "automatique" fonctionnel
	\begin{center}
	\FIGW{0.7}{toolb}
	\end{center}
	\smallskip
    \BI
	\o Les modules doivent être \textbf{compatible} et forment une chaine uniforme avec l'existant,\textbf{ en Python}
    \o Il sera nécessaire de développer des \textbf{"glue logic"} pour mettre ensemble les modules 
	\o Un \textbf{code réutilisable et bien documenté} pour pouvoir être utilisé par d'autre à la fin du stage.
    \EI
	 %[ ici, figure de la chaine avec les points d'intervention ]
	\note{
		Ce sera cool si on a ça à la fin !! 	
	}
\end{frame}
